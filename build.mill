import mill.define.Target
import mill.util.Jvm
import $ivy.`com.lihaoyi::mill-contrib-bloop:$MILL_VERSION`
import $ivy.`io.github.davidgregory084::mill-tpolecat::0.3.5`
import $ivy.`io.chris-kipp::mill-ci-release::0.1.9`
import os.Path
import mill._
import scalalib._
import publish._
import scalajslib._
import scalanativelib._
import mill.scalajslib.api._
import io.github.davidgregory084._
import io.kipp.mill.ci.release.CiReleaseModule
import mill.contrib.bloop.Bloop
import mill.scalalib.TestModule.Weaver

object versions {
  val scalaJSVersion = "1.14.0"
  val scalaNativeVersion = "0.4.17"
  val munitVersion = "1.1.0"
  val fs2Version = "3.12.0"
  val weaverVersion = "0.8.4"
  val jsoniterVersion = "2.17.0"

  val scala213 = "2.13"
  val scala3 = "3"

  val scalaVersions = Map(
    scala213 -> "2.13.16",
    scala3 -> "3.3.5"
  )

  val scala213Version = scalaVersions(scala213)

  val crossValues = for {
    crossVersion <- scalaVersions.keys.toList
  } yield (crossVersion)
}

import versions._

object core extends Cross[Core](crossValues)

trait Core extends RPCCrossModule {
  val sharedDeps  = Agg(
    ivy"com.github.plokhotnyuk.jsoniter-scala::jsoniter-scala-macros::$jsoniterVersion"
  )

  object jvm extends Shared {
    override def ivyDeps: T[Agg[Dep]] = sharedDeps
//    object tests extends Tests
  }

}

//object fs2 extends Cross[FS2](crossValues)
//trait FS2 extends RPCCrossModule {
//  override def ivyDeps: T[Agg[Dep]] = Agg(
//    ivy"co.fs2::fs2-core::${fs2Version}"
//  )
//
//  override def moduleDeps: Seq[PublishModule] = Seq(core())
//}

object examples extends mill.define.Module {

//   object server extends ScalaModule {
//     def ivyDeps = Agg(ivy"co.fs2::fs2-io:${fs2Version}")
//     def moduleDeps = Seq(fs2(versions.scala213, "jvm"))
//     def scalaVersion = versions.scala213Version
//   }
//
//   object client extends ScalaModule {
//     def ivyDeps = Agg(ivy"co.fs2::fs2-io:$fs2Version")
//     def moduleDeps = Seq(fs2(versions.scala213, "jvm"))
//     def scalaVersion = versions.scala213Version
//     def forkEnv: Target[Map[String, String]] = T {
//       val assembledServer = server.assembly()
//       super.forkEnv() ++ Map("SERVER_JAR" -> assembledServer.path.toString())
//     }
//   }

}

// #############################################################################
//  COMMON SETUP
// #############################################################################


trait RPCCrossModule extends Cross.Module[String] {

  trait Shared extends JsonRPCModule with CrossScalaModule with CrossValue with PlatformScalaModule { base =>
  }

  trait Tests extends TestModule with ScalaTests with Weaver {
    override def ivyDeps: T[Agg[Dep]] =
      Agg(ivy"com.disneystreaming::weaver-cats::$weaverVersion")

    override def sources: Target[Seq[PathRef]] = Seq(PathRef(base.millModuleBasePath.value / "test" / "src"))
  }

//  TODO wrong
//  override def artifactName = s"jsonrpclib-${millModuleSegments.parts.mkString("-")}"
//
//   class JVM(val crossVersion: String) extends PlatformSpecific {
//     override def platformLabel: String = "jvm"
//
//     trait WeaverTests extends ScalaTests {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"com.disneystreaming::weaver-cats::$weaverVersion")
//       def testFramework = "weaver.framework.CatsEffect"
//     }
//
//     trait MunitTests extends Tests with TestModule.Munit {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"org.scalameta::munit::$munitVersion")
//     }
//
//     trait Tests extends super.ScalaTests {
//       override def sources = T.sources(computeSources(this).map(PathRef(_)))
//       override def moduleDeps = super.moduleDeps ++ shared.crossPlatformTestModuleDeps.flatMap(matchingCross)
//     }
//   }
//
//   class JS(val crossVersion: String) extends PlatformSpecific with ScalaJSModule {
//     override def platformLabel: String = "js"
//     override def scalaJSVersion = versions.scalaJSVersion
//
//     override def scalacOptions = T {
//       super.scalacOptions().filterNot(_ == "-Ywarn-unused:params")
//     }
//
//     override def moduleKind = T(ModuleKind.CommonJSModule)
//     override def skipIdea = true
//
//     trait WeaverTests extends ScalaJSTests {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"com.disneystreaming::weaver-cats::$weaverVersion")
//       def testFramework = "weaver.framework.CatsEffect"
//     }
//
//     trait MunitTests extends ScalaJSTests with TestModule.Munit {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"org.scalameta::munit::$munitVersion")
//     }
//
//     trait Tests extends super.ScalaJSTests with Bloop.Module {
//       override def sources = T.sources(computeSources(this).map(PathRef(_)))
//       override def skipIdea = true
//       override def skipBloop = true
//       override def moduleDeps = super.moduleDeps ++ shared.crossPlatformTestModuleDeps.flatMap(matchingCross).collect {
//         case m: ScalaJSModule => m
//       }
//     }
//   }
//
//   class Native(val crossVersion: String) extends PlatformSpecific with ScalaNativeModule {
//     override def platformLabel: String = "native"
//     override def scalaNativeVersion = versions.scalaNativeVersion
//     override def scalacOptions = T {
//       super
//         .scalacOptions()
//         .filterNot { opts =>
//           Seq(
//             "-Ywarn-extra-implicit",
//             "-Xlint:constant"
//           ).contains(opts)
//         }
//         .filterNot(_.startsWith("-Ywarn-unused"))
//     }
//     override def skipIdea = true
//     override def skipBloop = true
//
//     trait WeaverTests extends ScalaNativeTests {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"com.disneystreaming::weaver-cats::$weaverVersion")
//       def testFramework = "weaver.framework.CatsEffect"
//     }
//
//     trait MunitTests extends ScalaNativeTests with TestModule.Munit {
//       def ivyDeps = super.ivyDeps() ++ Agg(ivy"org.scalameta::munit::$munitVersion")
//     }
//
//     trait Tests extends ScalaNativeTests with Bloop.Module {
//       override def nativeLinkStubs = true
//       override def skipIdea = true
//       override def skipBloop = true
//       override def sources = T.sources(computeSources(this).map(PathRef(_)))
//       override def moduleDeps = super.moduleDeps ++ shared.crossPlatformTestModuleDeps.flatMap(matchingCross).collect {
//         case m: ScalaNativeModule => m
//       }
//     }
//   }
//
//   trait PlatformSpecific extends JsonRPCModule with Bloop.Module { self =>
//     def platformLabel: String
//     def crossVersion: String
//     override def scalaVersion = versions.crossMap(crossVersion)
//
//     override def millSourcePath = shared.millSourcePath
//
//     override def ivyDeps = super.ivyDeps() ++ shared.crossPlatformIvyDeps()
//
//     def samePlatform(module: Module): Boolean =
//       self match {
//         case _: ScalaJSModule     => module.isInstanceOf[ScalaJSModule]
//         case _: ScalaNativeModule => module.isInstanceOf[ScalaNativeModule]
//         case _ =>
//           !(module.isInstanceOf[ScalaJSModule] || module
//             .isInstanceOf[ScalaNativeModule])
//       }
//
//     def sameScalaVersion(module: Module): Boolean = {
//       // Don't know why, pattern matching didn't seem to work here
//       module.isInstanceOf[PlatformSpecific] && (module.asInstanceOf[PlatformSpecific].crossVersion == self.crossVersion)
//     }
//
//     def sameCross(module: Module) = samePlatform(module) && sameScalaVersion(module)
//
//     override def artifactName = shared.artifactName
//
//     override def skipBloop = {
//       self match {
//         case _: ScalaJSModule     => true
//         case _: ScalaNativeModule => true
//         case _                    => false
//       }
//     } && { crossVersion != scala213 }
//
//   }
}

trait JsonRPCModule extends ScalaModule with CiReleaseModule with scalafmt.ScalafmtModule {
  def scalafmt() = reformat()
  def fmt() = reformat()
  def refreshedEnv = T.input(T.ctx().env)
  def publishVersion = T {
    if (refreshedEnv().contains("CI")) super.publishVersion()
    else "dev"
  }
  override def scalacOptions = T {
    super.scalacOptions() ++ Tpolecat.scalacOptionsFor(scalaVersion())
  }

  override def forkEnv = T { refreshedEnv() }

  def pomSettings = PomSettings(
    description = "A Scala jsonrpc library",
    organization = "tech.neander",
    url = "https://github.com/neandertech/jsonrpclib",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl(Some("https://github.com/neandertech/jsonrpclib")),
    developers = Seq(
      Developer("Baccata", "Olivier MÃ©lois", "https://github.com/baccata")
    )
  )

  override def sonatypeUri = "https://s01.oss.sonatype.org/service/local"
  override def sonatypeSnapshotUri =
    "https://s01.oss.sonatype.org/content/repositories/snapshots"
}
